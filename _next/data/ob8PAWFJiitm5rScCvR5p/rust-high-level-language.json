{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var o=n=>i(n,\"__esModule\",{value:!0});var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),m=(n,e)=>{o(n);for(var r in e)i(n,r,{get:e[r],enumerable:!0})},y=(n,e,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of h(e))!u.call(n,a)&&a!==\"default\"&&i(n,a,{get:()=>e[a],enumerable:!(r=c(e,a))||r.enumerable});return n},f=n=>y(o(i(n!=null?d(p(n)):{},\"default\",n&&n.__esModule&&\"default\"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);var l=g((k,s)=>{s.exports=_jsx_runtime});var I={};m(I,{default:()=>v,frontmatter:()=>w});var t=f(l()),w={title:\"Rust as a productive high-level language\",date:\"2020-11-10\",tags:[\"Rust\",\"Programming\"],draft:!1,summary:\"High-level productivity with Rust\",images:[],layout:\"PostLayout\"};function b(n){let e=Object.assign({p:\"p\",a:\"a\",hr:\"hr\",pre:\"pre\",code:\"code\",span:\"span\"},n.components),{wrapper:r}=e,a=(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Rust is often critiqued as a \",(0,t.jsx)(e.a,{href:\"https://news.ycombinator.com/item?id=24536645\",children:\"not a very productive\"}),\" programming language. It is true that there is a bit of a learning curve to be able to program in Rust; but beyond that, I think it pays off in productivity; and massively I must say.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"I haven't been using Rust for production much; maybe a bit more than a year. The static type checks means I'm getting much less bugs in my code, and spend considerably less time in debugging. I can safely say that, for me, Rust is more productive than JavaScript, PHP or Python and the margin keeps getting larger as I get more acquainted with the ecosystem.\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsxs)(e.p,{children:[\"To entice your interest, here is a situation that I handled lately: I have a program that writes logs to \",(0,t.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Syslog\",children:\"syslog\"}),\" and the terminal. The program compiles and functions correctly on my development machine. However, it returned an error when I deployed it to an \",(0,t.jsx)(e.a,{href:\"https://alpinelinux.org/\",children:\"Alpine\"}),\" Docker container. Turns out, Alpine doesn't have a running syslog service by default.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now that's fine, the program functioned correctly. But I don't care much for syslog on deployment since the program is running inside a container. One solution is to remove the syslog \",(0,t.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Sink_(computing)\",children:\"drain\"}),\" but I need that for development. I can use \",(0,t.jsx)(e.a,{href:\"https://doc.rust-lang.org/reference/conditional-compilation.html\",children:\"conditional compilation\"}),\"; but there is a better option: If syslog fails, for whatever reason, just ignore that and move on.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"So let's take a look at the old code.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsxs)(e.code,{className:\"code-highlight\",children:[(0,t.jsx)(e.span,{className:\"code-line\",children:`    let syslog_drain = syslog_drain()?;\n`}),(0,t.jsx)(e.span,{className:\"code-line\",children:`    let term_drain = term_drain()?;\n`})]})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This code creates two logging drains: one for syslog and one for the terminal. It uses the \",(0,t.jsx)(e.a,{href:\"https://doc.rust-lang.org/edition-guide/rust-2018/error-handling-and-panics/the-question-mark-operator-for-easier-error-handling.html\",children:\"? operator\"}),\" to evaluate the result. If the function returns an error, execution will stop and the error bubbles back to the top of the program.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"I have no idea how the syslog or any particular drain fails. And honestly, I don't want to get into these details. What I want is to check if there is a failure; and if so ignore that particular drain. Or return a \",(0,t.jsx)(e.a,{href:\"https://docs.rs/slog/2.5.2/slog/struct.Discard.html\",children:\"Discard drain\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.a,{href:\"https://doc.rust-lang.org/std/result/\",children:\"Result\"}),\" type and \",(0,t.jsx)(e.code,{children:\"? operator\"}),\" make this particularly easy. So here is the code that does that.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsxs)(e.code,{className:\"code-highlight\",children:[(0,t.jsx)(e.span,{className:\"code-line\",children:`    let syslog_drain = syslog_drain().unwrap_or(discard_drain()?);\n`}),(0,t.jsx)(e.span,{className:\"code-line\",children:`    let term_drain = term_drain().unwrap_or(discard_drain()?);\n`})]})}),`\n`,(0,t.jsx)(e.p,{children:\"And that's it. This code now compiles and runs correctly. If syslog is running, it'll write logs to syslog and the terminal. Otherwise, it'll write logs to the terminal and syslog is skipped. There are no conditions, no complicated checks and it's perfectly readable.\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(e.p,{children:\"There is more to Rust productivity than that. Macros, Iterators, Advanced Traits and Types, the new Async system. Once you are comfortable with all of these, you are now able to be productive, safe and fast.\"})]});return r?(0,t.jsx)(r,Object.assign({},n,{children:a})):a}var v=b;return I;})();\n;return Component.default;","toc":[],"frontMatter":{"readingTime":{"text":"3 min read","minutes":2.43,"time":145800,"words":486},"slug":"rust-high-level-language","fileName":"rust-high-level-language.md","title":"Rust as a productive high-level language","date":"2020-11-10T00:00:00.000Z","tags":["Rust","Programming"],"draft":false,"summary":"High-level productivity with Rust","images":[],"layout":"PostLayout"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.205,"time":12300,"words":41},"slug":["default"],"fileName":"default.md","name":"Abid Omar","avatar":"/static/images/avatar.png","occupation":"Entrepreneur","company":"Aderbal","email":"contact@omarabid.com","github":"https://github.com/omarabid","date":null}],"prev":{"title":"How complex is modern web development","date":"2020-10-26T00:00:00.000Z","tags":["Web","Programming"],"draft":false,"summary":"Visualizing the complexity of modern web development","images":[],"layout":"PostLayout","slug":"modern-web-dev"},"next":{"title":"Regulation as a Service","date":"2021-02-01T00:00:00.000Z","tags":["Business"],"draft":false,"summary":"Can you sell regulation?","images":[],"layout":"PostLayout","slug":"regulation-as-a-service"}},"__N_SSG":true}